class Solution{
  public:
    int solve(string str1,string str2,int n,vector<vector<int>>&dp){
        
        for(int i=1;i<=n;i++){
            for(int j=1;j<=n;j++){
                if(str1[i-1]==str2[j-1]){
                    dp[i][j]=1+dp[i-1][j-1];
                }else{
                     dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
                }
            }
        }
        return dp[n][n];
    }
  
    int countMin(string str){
    //complete the function here
     int n = str.length();
       string str1 = str;
       string str2  = str;
       reverse(str2.begin(),str2.end());
       vector<vector<int>>dp(n+1,vector<int>(n+1,0));
       

      int lcslen = solve(str1,str2,n,dp);
      return n-lcslen;
    }
};

//{ Driver Code Starts.
int main(){
    int t;
    cin >> t;
    while(t--){
        string str;
        cin >> str;
        Solution ob;
        cout << ob.countMin(str) << endl;
    }
return 0;
}


// } Driver Code Ends
