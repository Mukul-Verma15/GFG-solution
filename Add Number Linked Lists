//{ Driver Code Starts
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
using namespace std;

/* Linked list Node */
struct Node {
    int data;
    struct Node* next;

    Node(int x) {
        data = x;
        next = NULL;
    }
};

Node* buildList() {
    vector<int> arr;
    string input;
    getline(cin, input);
    stringstream ss(input);
    int number;
    while (ss >> number) {
        arr.push_back(number);
    }
    if (arr.empty()) {
        return NULL;
    }
    int val = arr[0];
    int size = arr.size();

    Node* head = new Node(val);
    Node* tail = head;

    for (int i = 1; i < size; i++) {
        val = arr[i];
        tail->next = new Node(val);
        tail = tail->next;
    }

    return head;
}

void printList(Node* n) {
    while (n) {
        cout << n->data << " ";
        n = n->next;
    }
    cout << endl;
}


// } Driver Code Ends
/* node for linked list:

struct Node {
    int data;
    struct Node* next;
    Node(int x) {
        data = x;
        next = NULL;
    }
};

*/

class Solution {
    void insertAtTail(int digit, Node* &tail1 ){
        Node* temp= new Node(digit);
        tail1->next= temp;
        tail1= temp;
        
        
    }
    
    private:
    Node* addLL(Node* head1, Node* head2){
        int carry= 0;
        Node* curr1= head1;
        Node* curr2= head2;
        Node* temp=new Node(-1);
        Node* tail1= temp;
        while(curr1!=nullptr and curr2!=nullptr){
            int sum=curr1->data+curr2->data+ carry;
            int digit= sum%10;
            insertAtTail(digit, tail1);
            carry= sum/10;
            curr1= curr1->next;
            curr2= curr2->next;
        }
        
       while(curr1!=nullptr){
           int val= curr1->data+carry;
           int digit= val%10;
             insertAtTail(digit, tail1);
             carry= val/10;
             curr1=curr1->next;
             
       }
       while(curr2!=nullptr){
           int val= curr2->data+carry;
           int digit= val%10;
           insertAtTail(digit, tail1);
          carry= val/10;
          curr2= curr2->next;
          
       }
       if(carry!=0){
             insertAtTail(carry, tail1);
       }
       temp= temp->next;
       return temp;
       
        
    }
    private:
    Node* reverse(Node* head){
        //revrsing the node
        
        if(head==nullptr){
            return nullptr;
        }
        Node* prev= nullptr;
        Node* forward= nullptr;
        Node* curr= head;
        while(curr!=nullptr){
            forward= curr->next;
            curr->next= prev;
            prev= curr;
            curr= forward;
        }
        return prev;
        
        
    }
  public:
    // Function to add two numbers represented by linked list.
    Node* addTwoLists(Node* num1, Node* num2) {
        // code here
          //reverse the linked list
       if(num1==nullptr){
           return num2;
       }
       if(num2==nullptr){
           return num1;
       }
       Node* head1= reverse(num1);
       Node* head2= reverse(num2);
       Node* ans= addLL(head1, head2);
      Node* revAns= reverse(ans);
      return revAns;
    }
};


//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;
    cin.ignore(); // To ignore the newline character after the integer input

    while (t--) {
        Node* num1 = buildList();
        Node* num2 = buildList();
        Solution ob;
        Node* res = ob.addTwoLists(num1, num2);
        printList(res);
    }
    return 0;
}

// } Driver Code Ends
