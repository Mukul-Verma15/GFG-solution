//{ Driver Code Starts
#include <bits/stdc++.h>

using namespace std;


// } Driver Code Ends
/*You are required to complete this method*/

class Solution{
  public:
    
    void solve(string s, int i, vector<string> &ans, string temp, int count) {
    if (count > 4) return;  // If more than 4 segments, it's invalid
    
    if (i == s.size()) {
        if (count == 4) {
            ans.push_back(temp);
        }
        return;
    }
    
    string t = "";
    int n = s.size();
    for (int ind = i; ind < min(n, i + 3); ind++) {
        t += s[ind];
        
        // If the segment is valid (no leading zeros unless it's "0" and <= 255)
        if ((t.size() > 1 && t[0] == '0') || stoi(t) > 255) break;
        
        if (!temp.empty()) {
            solve(s, ind + 1, ans, temp + "." + t, count + 1);
        } else {
            solve(s, ind + 1, ans, t, count + 1);
        }
    }
}


    vector<string> genIp(string &s) {
        // Your code here
        if(s.size()<4)
        return {"-1"};
        
        
        vector<string> ans;
        solve(s,0,ans,"",0);
        
        return ans;
    }

};

//{ Driver Code Starts.

int main() {
    int T;
    cin >> T;
    while (T--) {
        string s;
        cin >> s;

        /*generating naively*/
        Solution obj;
        vector<string> str = obj.genIp(s);
        sort(str.begin(), str.end());
        if(str.size()==0)
            cout << -1 << "\n";
        else{
            for (auto &u : str) {
                cout << u << "\n";
            }
        }
    
cout << "~" << "\n";
}
}
// } Driver Code Ends
