//{ Driver Code Starts
// Initial template for C++

#include <bits/stdc++.h>
using namespace std;

struct Node {
    int data;
    struct Node* next;

    Node(int x) {
        data = x;
        next = NULL;
    }
};

void printList(Node* node) {
    while (node != NULL) {
        cout << node->data % 10;
        node = node->next;
    }
    cout << "\n";
}


// } Driver Code Ends
// User function template for C++

/*

struct Node
{
    int data;
    struct Node* next;

    Node(int x){
        data = x;
        next = NULL;
    }
};

*/

class Solution {
  public:
    Node *rev(Node* head) {
    Node *curr = head, *prev = NULL;
    while (curr) {
        Node *next = curr->next;
        curr->next = prev;
        prev = curr;
        curr = next;
    }
    return prev;
}

    Node* addOne(Node* head) {
        // Your Code here
        // return head of list after adding one
         if (!head) return head;

    // Step 1: Reverse the linked list
    Node *revHead = rev(head);
    Node *temp = revHead;

    int carry = 1;  // We need to add 1

    // Step 2: Traverse the reversed list and add the carry
    while (temp) {
        int sum = temp->data + carry;
        temp->data = sum % 10;  // Update the current node's value
        carry = sum / 10;  // Update carry for the next iteration
        
        // Move to the next node
        if (temp->next == NULL && carry > 0) {
            // If we are at the last node and still have carry, we need to add a new node
            temp->next = new Node(carry);
            carry = 0;  // Reset carry after adding the new node
        }
        temp = temp->next;
    }

    // Step 3: Reverse the list back to its original order
    return rev(revHead);
    }
};

//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;
    cin.ignore();
    while (t--) {
        vector<int> arr;
        string input;
        getline(cin, input);
        stringstream ss(input);
        int number;
        while (ss >> number) {
            arr.push_back(number);
        }

        if (arr.empty()) {
            cout << -1 << endl;
            continue;
        }

        int data = arr[0];
        struct Node* head = new Node(data);
        struct Node* tail = head;
        for (int i = 1; i < arr.size(); ++i) {
            data = arr[i];
            tail->next = new Node(data);
            tail = tail->next;
        }
        Solution ob;
        head = ob.addOne(head);
        printList(head);
    }
    return 0;
}

// } Driver Code Ends
